	ver4 : 차량 물품점에서 조립이 완료된(타이어가 장착된) 완제품 구매한다.
	  (1) Car 생성자를 이용한 조립.
	  (2) 설정자(setter) 메소드로 조립.


[스프링 빈 설정파일(차량 물품점) - applicationContext.xml]
1. 빈(객체) 생성 태그
	<bean id="객체이름" class="해당 객체를 만들기 위한 클래스 이름(풀 패키지명)">
2. Car 클래스 객체가 의존하는 Tire조립 : 생성자(constructor) 조립
	Tire tire = new KoreaTire();
	Car myCar = new Car(tire);
 ---------------------------->
	<bean id="tire" class="ver4_1.KoreaTire"/>
	<bean id="sonata" class="ver4_1.Car>
		<constructor-arg ref="tire"/>
	</bean>
3. Car 클래스 객체가 의존하는 Tire조립 : 설정자(setter) 조립
	Tire tire = new KoreaTire();
	Car myCar = new Car();
	myCar.setTire(tire);
----------------------------->
	<bean id="tire" class="ver4_2.KoreaTire"/>
	<bean id="sonata" class="ver4_2.Car>
		<property ref="tire"/>
	</bean>
--------------------------------------------------------------------------------------
ver5 : ver3번과 같이 Car 클래스의 객체와 Tire 객체를 스프링 컨테이너에 등록
      해놓고 필요한 시점에 getBean 하여 활용하고 싶은데 xml에 일일히 적기
      귀찮음. @Component을 활용해서 스프링에 객체 등록하기
 - applicationContext.xml 파일에 <bean> 태그 쓰는 대신에 자바파일 클래스
   위에 @Component 애노테이션 붙이기
 - applicationContext.xml 파일에 <context:annotion-config>와
   <context:component-scan> 태그만 적어주면 객체들을 스캔해 옴.
-----------------------------------------------------------------------------------------
ver6 : ver5 에서는 조립이 안됨. 조립된 완제품 Car를 가져오고 싶음.
      @Autowired 애노테이션을 이용하면 현재 스프링에 등록된 객체중!!
      적당한 놈(타입매칭)을 찾아와서 조립까지 끝내놓음.
 (문제 1) @Autowired에 매칭되는 객체가 없는 경우
	(@Autowired의 required 속성)
	- 없으면 없는대로 그냥 실행시키기
	- 없으면 에러 발생시키고 바로 프로그램 중단시키기 : default
 (문제 2) @Autowired에 매칭되는 객체가 2개 이상인 경우
	- 매칭되는 객체중 특정 객체를 선택하도록 하기(@Qualifier)
	- 후보 객체 없으면 에러 발생시키고 프로그램 중단시키기 : default
----------------------------------------------------------------------------------------
ver1: Car클래스가 의존하는 객체 Tire를 직접 new 했음.
     만약 Tire를 교체하고자 하면 Car 클래스를 수정해야 하는 상황.
ver2: Tire 인터페이스를 이용해서 외부로부터 Tire객체를 주입해서 Car에      집어넣기.(결합도 느슨)
ver3: applicationContext.xml파일이 등장함. 객체의 관리를 Spring에서 하기로 함      (조립은 아직)
ver4: 스프링에 등록되어 관리되는 객체들 간의 의존관계를 스프링이 직접 처리
     (조립함.)
ver5: ver3에서 스프링에 객체를 등록할 때 쓰던 <bean>태그 대신 @Component  
     애노테이션 활용.
ver6: 스프링에 등록되어 관리되는 객체들 간의 의존관계를 @Autowired 
     애노테이션을 활용.(조립함)
----------------------------------------------------------------------------------------
 직접 작성한 클래스를 스프링에 등록할 때에는 애노테이션 방식이 편함.
 직접 작성하지 않은 스프링 라이브러리 클래스의 객체를 생성해서 등록할때에는
applicationContext.xml 파일에 <bean>태그 사용해야 함.
----------------------------------------------------------------------------------------





















